#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6
#    Jan 19, 2019 12:50:11 AM CET  platform: Windows NT

import shutil, os, sys
import tkinter as tk
import tkinter.ttk as ttk
import listboxConstructor as lsc
import view_window
import example_window
from tkinter import filedialog


def start_gui():
    root = tk.Tk()
    MainWin (root)
    root.mainloop()


class MainWin:
    def __init__(self, top=None):
        '''Configures and populates mainwindow.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font10 = "-family Arial -size 10 -weight normal -slant roman " \
                 "-underline 0 -overstrike 0"
        font11 = "-family Arial -size 9 -weight normal -slant roman " \
                 "-underline 0 -overstrike 0"
        font9 = "-family Arial -size 10 -weight bold -slant roman " \
                "-underline 0 -overstrike 0"
        self.style = ttk.Style()
        self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map('.', background=
        [('selected', _compcolor), ('active', _ana2color)])

        top.geometry("935x600+290+150")
        top.title("MP3sort")
        top.minsize(width=450, height=270)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=[('selected', _compcolor), ('active', _ana2color)])
        self.tabs = ttk.Notebook(top)
        self.tabs.place(relx=0.0, rely=0.0, relheight=1.01, relwidth=1.01)
        self.tabs.configure(width=950)
        self.tabs_t0 = tk.Frame(self.tabs)
        self.tabs.add(self.tabs_t0, padding=3)
        self.tabs.tab(0, text="Sort      ")
        self.tabs_t0.configure(background="#d9d9d9")
        self.tabs_t1 = tk.Frame(self.tabs)
        self.tabs.add(self.tabs_t1, padding=3)
        self.tabs.tab(1, text="Setup     ")
        self.tabs_t1.configure(background="#d9d9d9")
        self.tabs_t2 = tk.Frame(self.tabs)
        self.tabs.add(self.tabs_t2, padding=3)
        self.tabs.tab(2, text="Help      ")
        self.tabs_t2.configure(background="#d9d9d9")

        self.style.configure('Treeview.Heading', font=font10)
        self.treeview = ScrolledTreeView(self.tabs_t0)
        self.treeview.place(x=0, y=40, relheight=0.922, relwidth=0.99)
        self.treeview.configure(columns=('path','artist','title','album','tracknr','year'), displaycolumns=[0,1,2,3,4,5])
        self.treeview.column("#0", stretch=0, width=0, minwidth=0)
        self.treeview.heading("path", text="Path")
        self.treeview.heading("artist", text="Artist")
        self.treeview.heading("title", text="Title")
        self.treeview.heading("album", text="Album")
        self.treeview.heading("tracknr", text="#")
        self.treeview.heading("year", text="Year")
        self.treeview.column("tracknr", stretch=False, width=20, minwidth=20)
        self.treeview.column("year", stretch=False, width=40, minwidth=40)

        self.button_sort = tk.Button(self.tabs_t0)
        self.button_sort.place(x=5, y=10, height=24, width=81)
        self.button_sort.configure(background="#d9d9d9")
        self.button_sort.configure(font=font9)
        self.button_sort.configure(text='''Sort''')

        self.button_load = tk.Button(self.tabs_t0)
        self.button_load.place(x=100, y=10, height=24, width=81)
        self.button_load.configure(background="#d9d9d9")
        self.button_load.configure(font=font9)
        self.button_load.configure(text='''Load''')

        self.button_view = tk.Button(self.tabs_t0)
        self.button_view.place(x=190, y=10, height=24, width=81)
        self.button_view.configure(background="#d9d9d9")
        self.button_view.configure(font=font9)
        self.button_view.configure(text='''View''')

        self.button_clean = tk.Button(self.tabs_t0)
        self.button_clean.place(x=280, y=10, height=24, width=81)
        self.button_clean.configure(background="#d9d9d9")
        self.button_clean.configure(font=font9)
        self.button_clean.configure(text='''Clean dir''')

        self.label_out_dir = tk.LabelFrame(self.tabs_t1)
        self.label_out_dir.place(x=10,y=10, height=75, relwidth=0.968)
        self.label_out_dir.configure(relief='groove')
        self.label_out_dir.configure(font=font10)
        self.label_out_dir.configure(text='''Output directory''')
        self.label_out_dir.configure(background="#d9d9d9")

        self.entry_out_dir = tk.Entry(self.label_out_dir)
        self.entry_out_dir.place(x=120, y=30, height=24, relwidth=0.764, bordermode='ignore')
        self.entry_out_dir.configure(background="white")
        self.entry_out_dir.configure(font=font11)
        self.entry_out_dir.configure(selectbackground="#c4c4c4")
        self.entry_out_dir.configure(selectforeground="black")

        self.button_change_dir = tk.Button(self.label_out_dir)
        self.button_change_dir.place(in_=self.entry_out_dir, relx=1, x=5, height=24, width=71, bordermode='ignore')
        self.button_change_dir.configure(background="#d9d9d9")
        self.button_change_dir.configure(font=font9)
        self.button_change_dir.configure(text='''Change''')

        self.label_current_dir = tk.Label(self.label_out_dir)
        self.label_current_dir.place(x=10, y=30, height=24, width=102 , bordermode='ignore')
        self.label_current_dir.configure(anchor='e')
        self.label_current_dir.configure(background="#d9d9d9")
        self.label_current_dir.configure(font=font10)
        self.label_current_dir.configure(text='''Current:''')

        self.label_out_format = tk.LabelFrame(self.tabs_t1)
        self.label_out_format.place(x=10, y=90, height=145, relwidth=0.97)
        self.label_out_format.configure(relief='groove')
        self.label_out_format.configure(font=font10)
        self.label_out_format.configure(text='''Output format''')
        self.label_out_format.configure(background="#d9d9d9")

        self.label_control_str = tk.Label(self.label_out_format)
        self.label_control_str.place(x=10, y=70, height=24, width=102, bordermode='ignore')
        self.label_control_str.configure(anchor='e')
        self.label_control_str.configure(background="#d9d9d9")
        self.label_control_str.configure(font=font10)
        self.label_control_str.configure(text='''Control string:''')

        self.msg_format = tk.Message(self.label_out_format)
        self.msg_format.place(x=10, y=20, relwidth=0.764, bordermode='ignore')
        self.msg_format.configure(anchor='nw')
        self.msg_format.configure(background="#d9d9d9")
        self.msg_format.configure(font=font11)
        self.msg_format.configure(text='''Folder structure and file names are setup by control string.\nKey words for control string are: '*artist', '*album', '*title', '*number' and '*year'. To indicate new subdirectory, enter '*/'.''')
        self.msg_format.configure(width=645)

        self.button_example_format = tk.Button(self.label_out_format)
        self.button_example_format.place(in_=self.msg_format, relx=1, x=115, height=24, width=71, bordermode='ignore')
        self.button_example_format.configure(background="#d9d9d9")
        self.button_example_format.configure(font=font10)
        self.button_example_format.configure(text='''Example''')

        self.entry_format = tk.Entry(self.label_out_format)
        self.entry_format.place(x=120, y=70, height=24, relwidth=0.764, bordermode='ignore')
        self.entry_format.configure(background="white")
        self.entry_format.configure(font=font11)
        self.entry_format.configure(selectbackground="#c4c4c4")
        self.entry_format.configure(selectforeground="black")

        self.button_default_format = tk.Button(self.label_out_format)
        self.button_default_format.place(in_=self.entry_format, relx=1, x=5, height=24, width=71, bordermode='ignore')
        self.button_default_format.configure(background="#d9d9d9")
        self.button_default_format.configure(font=font9)
        self.button_default_format.configure(text='''Default''')

        self.label_move_copy = tk.Label(self.label_out_format)
        self.label_move_copy.place(x=10, y=110, height=24, width=122, bordermode='ignore')
        self.label_move_copy.configure(anchor='e')
        self.label_move_copy.configure(background="#d9d9d9")
        self.label_move_copy.configure(font=font10)
        self.label_move_copy.configure(text='''Move or copy files?''')

        self.radio_move_file = tk.Radiobutton(self.label_out_format)
        self.radio_move_file.place(x=160, y=110, bordermode='ignore')
        self.radio_move_file.configure(background="#d9d9d9")
        self.radio_move_file.configure(justify='left')
        self.radio_move_file.configure(text='''Move''')

        self.radio_copy_file = tk.Radiobutton(self.label_out_format)
        self.radio_copy_file.place(x=240, y=110, bordermode='ignore')
        self.radio_copy_file.configure(background="#d9d9d9")
        self.radio_copy_file.configure(justify='left')
        self.radio_copy_file.configure(text='''Copy''')

    # view window setup
        self.view_win = view_window.View()
        self.view_win.hide_show()
        self.view_win.show_option[0].trace("w", self.refresh)
        self.view_win.show_option[1].trace("w", self.refresh)
        self.view_win.show_option[2].trace("w", self.refresh)
        self.view_win.show_option[3].trace("w", self.refresh)
        self.view_win.show_option[4].trace("w", self.refresh)
        self.view_win.show_option[5].trace("w", self.refresh)
        self.view_win.sort_option.trace("w", self.refresh)

    # output path variable and text field
        self.output_path = tk.StringVar(value='C:\MP3sort')
        self.entry_out_dir.configure(textvariable=self.output_path)

    # format variable and entry field
        self.format = tk.StringVar(value='*artist//*album (*year)//*artist - *album - *number - *title')
        self.entry_format.configure(textvariable=self.format)
        self.button_default_format.configure(command=lambda: self.format.set('*artist//*album (*year)//*artist - *album - *number - *title'))

    # copy move variable in format
        self.copy_move = tk.StringVar(value='copy')
        self.radio_copy_file.configure(variable=self.copy_move, value='copy')
        self.radio_move_file.configure(variable=self.copy_move, value='move')

    # button commands
        self.button_change_dir.configure(command=lambda: self.output_path_button_callback())
        self.button_load.configure(command= lambda: self.load_files())
        self.button_view.configure(command= lambda: self.view_win.hide_show())
        self.button_example_format.configure(command= lambda: example_window.Example())
        self.button_sort.configure(command=lambda: self.sort())

    def sort(self):
        self.treeview.delete(*self.treeview.get_children())
        output_root = self.output_path.get().replace('\\','/') + '/'
        for song in self.book.data():
            filename = self.format.get() + '.mp3'
            song[1:] = [''.join(['' if ch in '\\/"<>%:?*|' else ch for ch in item]) for item in song[1:]]
            if '*artist' in filename: filename= filename.replace('*artist',song[1])
            if '*title' in filename: filename= filename.replace('*title', song[2])
            if '*album' in filename: filename= filename.replace('*album', song[3])
            if '*number' in filename: filename= filename.replace('*number', song[4])
            if '*year' in filename: filename = filename.replace('*year', song[5])
            filename = filename.replace('\\', '/')
            path_song = filename.rsplit('/',1)
            os.makedirs(output_root + path_song[0], exist_ok=True)
            if self.copy_move.get() is 'copy': shutil.copy(song[0],output_root + filename)
            else: shutil.move(song[0],output_root + filename)

    def refresh(self, *args):
        self.refresh_treeview()

    def refresh_treeview(self):
        self.treeview.delete(*self.treeview.get_children())
        for song in self.book.data(sort=self.view_win.sort_option.get()):
            self.treeview.insert("", tk.END, values=song)
            show_option = [1*n if self.view_win.show_option[n].get() else None for n in range(6)]
            show_option = [item for item in show_option if item is not None]
            self.treeview.configure(displaycolumns=show_option)

    def load_files(self):
        '''opens win dialog, allows to select mp3 files
        saves selected file paths into array, then populates treeview'''
        self.treeview.delete(*self.treeview.get_children())
        self.files = filedialog.askopenfilenames(filetypes=[("MP3 files", ".mp3")])
        self.book = lsc.Book(self.files)
        self.refresh_treeview()

    def output_path_button_callback(self):
        '''browse button function, opens win dialog
        puts selected dir into text box'''
        self.output_path = filedialog.askdirectory()
        self.entry_out_dir.delete(0, tk.END)
        self.entry_out_dir.insert(tk.END, self.output_path)


#Following code facilitates Scrolled widgets.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
              | tk.Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledTreeView(AutoScroll, ttk.Treeview):
    '''A standard ttk Treeview widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        ttk.Treeview.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform
def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')

if __name__ == '__main__':
    start_gui()





