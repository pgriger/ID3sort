#ID3sort is program for creating and sorting mp3 files based on ID3 tag data.
#Program has a GUI for setting up input files and output format.


# GUI module generated by PAGE version 4.19
#  in conjunction with Tcl version 8.6

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter import filedialog
import platform
import listboxConstructor as lbc


def start_gui():
    """Starting point of main routine."""
    root = tk.Tk()
    MainApp(root)
    root.mainloop()


class popupExample():
    '''popup windows with example of setting of output format
    popup will block other windows'''

    def ok(self):
        self.root.grab_set()
        self.top.destroy()

    def __init__(self, root):
        self.root = root
        self.top = tk.Toplevel()
        self.top.grab_set()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'

        self.top.geometry("508x188+556+366")
        self.top.title("Example")
        self.top.configure(background="#d9d9d9")

        message = tk.Message(self.top)
        message.place(relx=0.0, rely=0.053, relheight=0.761
                , relwidth=1.004)
        message.configure(background="#d9d9d9")
        message.configure(foreground="#000000")
        message.configure(highlightbackground="#d9d9d9")
        message.configure(highlightcolor="black")
        message.configure(text='''Take the 4th track from Daft Punk's album Random Access Memories from 2013 called Within.\n\nFollowing control string: '*artist//*album - (*year)//*artist - *album - *number - *title'

Results in following structure:
    - Output Directory
        - 'Daft Punk'
            - 'Random Access Memories (2013)'
                - 'Daft Punk - Random Access Memories - 04 - Within.mp3\'''')
        message.configure(width=510)

        bt_ok = tk.Button(self.top)
        bt_ok.place(relx=0.846, rely=0.798, height=24, width=57)
        bt_ok.configure(activebackground="#ececec")
        bt_ok.configure(activeforeground="#000000")
        bt_ok.configure(background="#d9d9d9")
        bt_ok.configure(disabledforeground="#a3a3a3")
        bt_ok.configure(foreground="#000000")
        bt_ok.configure(highlightbackground="#d9d9d9")
        bt_ok.configure(highlightcolor="black")
        bt_ok.configure(pady="0")
        bt_ok.configure(text='''OK''')
        bt_ok.configure(width=57)
        bt_ok.configure(command=self.ok)


class popupFormat():
    '''popup window with output settings
    locks MainApp while open
    returns output format as string and copy/move option'''

    def save(self):
        if self.new_control_str.get():
            self.cs = self.new_control_str
            self.root.destroy()
        else:
            self.cancel()

    def cancel(self):
        self.cs = self.old_control_str
        self.root.destroy()

    def show(self):
        self.root.wait_window()
        return self.cs.get(), self.radio_option.get()

    def popupExample(self):
        popupExample(self.root)

    def __init__(self, currentControlString, currentOption):
        self.root = tk.Toplevel()
        self.old_control_str = tk.StringVar(value=currentControlString)
        self.new_control_str = tk.StringVar()
        self.radio_option = tk.StringVar(value=currentOption)
        self.root.grab_set()

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'

        self.root.geometry("679x199+405+253")
        self.root.title("New Toplevel")
        self.root.configure(background="#d9d9d9")
        self.root.configure(highlightbackground="#d9d9d9")
        self.root.configure(highlightcolor="black")

        self.msg = tk.Message(self.root)
        self.msg.place(relx=0.015, rely=0.0, relheight=0.216, relwidth=0.81)
        self.msg.configure(background="#d9d9d9")
        self.msg.configure(foreground="#000000")
        self.msg.configure(highlightbackground="#d9d9d9")
        self.msg.configure(highlightcolor="black")
        self.msg.configure(text='''Output directory structure and file names are setup by control string.
Key words are: '*artist', '*album', '*title', '*number' and '*year'. To indicate new subdirectory enter '//'.''')
        self.msg.configure(width=550)

        self.label_setup = tk.LabelFrame(self.root)
        self.label_setup.place(relx=0.015, rely=0.251, relheight=0.729
                               , relwidth=0.972)
        self.label_setup.configure(relief='groove')
        self.label_setup.configure(foreground="black")
        self.label_setup.configure(text='''Setup''')
        self.label_setup.configure(background="#d9d9d9")
        self.label_setup.configure(highlightbackground="#d9d9d9")
        self.label_setup.configure(highlightcolor="black")
        self.label_setup.configure(width=660)

        self.entry_controlString = tk.Entry(self.label_setup)
        self.entry_controlString.place(relx=0.212, rely=0.483, height=20
                                       , relwidth=0.779, bordermode='ignore')
        self.entry_controlString.configure(background="white")
        self.entry_controlString.configure(disabledforeground="#a3a3a3")
        self.entry_controlString.configure(font="TkFixedFont")
        self.entry_controlString.configure(foreground="#000000")
        self.entry_controlString.configure(highlightbackground="#d9d9d9")
        self.entry_controlString.configure(highlightcolor="black")
        self.entry_controlString.configure(insertbackground="black")
        self.entry_controlString.configure(selectbackground="#c4c4c4")
        self.entry_controlString.configure(selectforeground="black")
        self.entry_controlString.configure(textvariable=self.new_control_str)

        self.rbt_copy = tk.Radiobutton(self.label_setup)
        self.rbt_copy.place(relx=0.227, rely=0.759, relheight=0.172
                            , relwidth=0.085, bordermode='ignore')
        self.rbt_copy.configure(activebackground="#ececec")
        self.rbt_copy.configure(activeforeground="#000000")
        self.rbt_copy.configure(background="#d9d9d9")
        self.rbt_copy.configure(disabledforeground="#a3a3a3")
        self.rbt_copy.configure(foreground="#000000")
        self.rbt_copy.configure(highlightbackground="#d9d9d9")
        self.rbt_copy.configure(highlightcolor="black")
        self.rbt_copy.configure(justify='left')
        self.rbt_copy.configure(text='''Copy''')
        self.rbt_copy.configure(variable = self.radio_option)
        self.rbt_copy.configure(value = 'copy')

        self.rbt_move = tk.Radiobutton(self.label_setup)
        self.rbt_move.place(relx=0.348, rely=0.759, relheight=0.172
                            , relwidth=0.088, bordermode='ignore')
        self.rbt_move.configure(activebackground="#ececec")
        self.rbt_move.configure(activeforeground="#000000")
        self.rbt_move.configure(background="#d9d9d9")
        self.rbt_move.configure(disabledforeground="#a3a3a3")
        self.rbt_move.configure(foreground="#000000")
        self.rbt_move.configure(highlightbackground="#d9d9d9")
        self.rbt_move.configure(highlightcolor="black")
        self.rbt_move.configure(justify='left')
        self.rbt_move.configure(text='''Move''')
        self.rbt_move.configure(variable = self.radio_option)
        self.rbt_move.configure(value = 'move')

        self.label_currentCS = tk.Label(self.label_setup)
        self.label_currentCS.place(relx=0.015, rely=0.207, height=21, width=122
                                   , bordermode='ignore')
        self.label_currentCS.configure(activebackground="#f9f9f9")
        self.label_currentCS.configure(activeforeground="black")
        self.label_currentCS.configure(anchor='e')
        self.label_currentCS.configure(background="#d9d9d9")
        self.label_currentCS.configure(disabledforeground="#a3a3a3")
        self.label_currentCS.configure(foreground="#000000")
        self.label_currentCS.configure(highlightbackground="#d9d9d9")
        self.label_currentCS.configure(highlightcolor="black")
        self.label_currentCS.configure(text='''Current control string:''')

        self.txt_currentCS = tk.Text(self.label_setup)
        self.txt_currentCS.place(relx=0.212, rely=0.207, relheight=0.166
                                 , relwidth=0.779, bordermode='ignore')
        self.txt_currentCS.configure(background="white")
        self.txt_currentCS.configure(font="TkTextFont")
        self.txt_currentCS.configure(foreground="black")
        self.txt_currentCS.configure(highlightbackground="#d9d9d9")
        self.txt_currentCS.configure(highlightcolor="black")
        self.txt_currentCS.configure(insertbackground="black")
        self.txt_currentCS.configure(selectbackground="#c4c4c4")
        self.txt_currentCS.configure(selectforeground="black")
        self.txt_currentCS.configure(width=514)
        self.txt_currentCS.configure(wrap='word')
        self.txt_currentCS.insert(tk.END, self.old_control_str.get())
        self.txt_currentCS.configure(state='disabled')

        self.label_newCS = tk.Label(self.label_setup)
        self.label_newCS.place(relx=0.015, rely=0.483, height=21, width=122
                               , bordermode='ignore')
        self.label_newCS.configure(activebackground="#f9f9f9")
        self.label_newCS.configure(activeforeground="black")
        self.label_newCS.configure(anchor='e')
        self.label_newCS.configure(background="#d9d9d9")
        self.label_newCS.configure(disabledforeground="#a3a3a3")
        self.label_newCS.configure(foreground="#000000")
        self.label_newCS.configure(highlightbackground="#d9d9d9")
        self.label_newCS.configure(highlightcolor="black")
        self.label_newCS.configure(text='''New control string:''')

        self.label_file = tk.Label(self.label_setup)
        self.label_file.place(relx=0.015, rely=0.759, height=21, width=122
                              , bordermode='ignore')
        self.label_file.configure(activebackground="#f9f9f9")
        self.label_file.configure(activeforeground="black")
        self.label_file.configure(anchor='e')
        self.label_file.configure(background="#d9d9d9")
        self.label_file.configure(disabledforeground="#a3a3a3")
        self.label_file.configure(foreground="#000000")
        self.label_file.configure(highlightbackground="#d9d9d9")
        self.label_file.configure(highlightcolor="black")
        self.label_file.configure(text='''File:''')

        self.bt_OK = tk.Button(self.label_setup)
        self.bt_OK.place(relx=0.864, rely=0.759, height=24, width=77
                         , bordermode='ignore')
        self.bt_OK.configure(activebackground="#ececec")
        self.bt_OK.configure(activeforeground="#000000")
        self.bt_OK.configure(background="#d9d9d9")
        self.bt_OK.configure(disabledforeground="#a3a3a3")
        self.bt_OK.configure(foreground="#000000")
        self.bt_OK.configure(highlightbackground="#d9d9d9")
        self.bt_OK.configure(highlightcolor="black")
        self.bt_OK.configure(pady="0")
        self.bt_OK.configure(text='''OK''')
        self.bt_OK.configure(width=77)
        self.bt_OK.configure(command=self.save)

        self.bt_cancel = tk.Button(self.label_setup)
        self.bt_cancel.place(relx=0.697, rely=0.759, height=24, width=77
                             , bordermode='ignore')
        self.bt_cancel.configure(activebackground="#ececec")
        self.bt_cancel.configure(activeforeground="#000000")
        self.bt_cancel.configure(background="#d9d9d9")
        self.bt_cancel.configure(disabledforeground="#a3a3a3")
        self.bt_cancel.configure(foreground="#000000")
        self.bt_cancel.configure(highlightbackground="#d9d9d9")
        self.bt_cancel.configure(highlightcolor="black")
        self.bt_cancel.configure(pady="0")
        self.bt_cancel.configure(text='''Cancel''')
        self.bt_cancel.configure(width=77)
        self.bt_cancel.configure(command=self.cancel)

        self.bt_example = tk.Button(self.label_setup)
        self.bt_example.place(relx=0.53, rely=0.759, height=24, width=77
                              , bordermode='ignore')
        self.bt_example.configure(activebackground="#ececec")
        self.bt_example.configure(activeforeground="#000000")
        self.bt_example.configure(background="#d9d9d9")
        self.bt_example.configure(disabledforeground="#a3a3a3")
        self.bt_example.configure(foreground="#000000")
        self.bt_example.configure(highlightbackground="#d9d9d9")
        self.bt_example.configure(highlightcolor="black")
        self.bt_example.configure(pady="0")
        self.bt_example.configure(text='''Example''')
        self.bt_example.configure(width=77)
        self.bt_example.configure(command=self.popupExample)


class MainApp:
    '''main window and app class, kicked off in start_gui'''

    def popup_format(self):
        self.format_string, self.format_option = popupFormat(self.format_string, self.format_option).show()

    def browse_button(self):
        '''browse button function, opens win dialog
        puts selected dir into text box'''
        self.output_path = filedialog.askdirectory()
        self.txt_outputDir.configure(state=tk.NORMAL)
        self.txt_outputDir.delete('1.0', tk.END)
        self.txt_outputDir.insert(tk.END, ' ' + self.output_path)
        self.txt_outputDir.configure(state=tk.DISABLED)

    def load_files(self):
        '''opens win dialog, allows to select mp3 files
        saves selected file paths into array, then populates listbox'''
        self.files = filedialog.askopenfilenames(filetypes=[("MP3 files",".mp3")])
        self.book = lbc.Book(self.files)
        self.listbox_update(self.book)

    def control_id3view(self):
        '''produces control view vector, later used to generate input for listbox'''
        control = [self.view_artist.get(),
                   self.view_album.get(),
                   self.view_title.get(),
                   self.view_titlenr.get(),
                   self.view_year.get()]
        if any(control):
            return control
        else:
            self.cbt_title.select()
            return [0,0,1,0,0]

    def listbox_update(self, book):
        self.listbox.delete(0, tk.END)
        self.listbox.insert("end", *book.construct_list(view=self.view.get(),
                                                        show=self.control_id3view(),
                                                        sort=self.sort_control.get()))

    def id3view_off(self):
        '''grey out/disable ID3view option if PATH view is on'''
        if self.view.get() == 'path':
            self.cbt_artist.configure(state='disabled')
            self.cbt_album.configure(state='disabled')
            self.cbt_title.configure(state='disabled')
            self.cbt_num.configure(state='disabled')
            self.cbt_year.configure(state='disabled')
            self.rbt_artist.configure(state='disabled')
            self.rbt_album.configure(state='disabled')
            self.rbt_title.configure(state='disabled')
            self.rbt_num.configure(state='disabled')
            self.rbt_year.configure(state='disabled')
        elif self.view.get() == 'id3view':
            self.cbt_artist.configure(state='normal')
            self.cbt_album.configure(state='normal')
            self.cbt_title.configure(state='normal')
            self.cbt_num.configure(state='normal')
            self.cbt_year.configure(state='normal')
            self.rbt_artist.configure(state='normal')
            self.rbt_album.configure(state='normal')
            self.rbt_title.configure(state='normal')
            self.rbt_num.configure(state='normal')
            self.rbt_year.configure(state='normal')

    def updater(self):
        self.id3view_off()
        self.listbox_update(self.book)
        pass

    def __init__(self, root=None):
        self.format_string = '*artist//*album - (*year)//*artist - *album - *number - *title'
        self.format_option = 'copy'
        """This class configures and populates the toplevel window.
           top is the toplevel containing window."""
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#ececec' # Closest X11 color: 'gray92' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        root.geometry("780x535+444+144")
        root.title("ID3sort")
        root.configure(background="#d9d9d9")
        root.configure(highlightbackground="#d9d9d9")
        root.configure(highlightcolor="black")

        #graphic frame "setup", DONE
        self.frame_setup = tk.LabelFrame(root)
        self.frame_setup.place(relx=0.5, rely=0.542, relheight=0.439
                , relwidth=0.487)
        self.frame_setup.configure(relief='groove')
        self.frame_setup.configure(foreground="black")
        self.frame_setup.configure(text="""Setup""")
        self.frame_setup.configure(background="#d9d9d9")
        self.frame_setup.configure(highlightbackground="#d9d9d9")
        self.frame_setup.configure(highlightcolor="black")
        self.frame_setup.configure(width=380)

        #RUN button, TO DO
        self.bt_run = tk.Button(self.frame_setup)
        self.bt_run.place(relx=0.684, rely=0.809, height=30, width=95
                , bordermode='ignore')
        self.bt_run.configure(activebackground="#ececec")
        self.bt_run.configure(activeforeground="#000000")
        self.bt_run.configure(background="#d9d9d9")
        self.bt_run.configure(disabledforeground="#a3a3a3")
        self.bt_run.configure(foreground="#000000")
        self.bt_run.configure(highlightbackground="#d9d9d9")
        self.bt_run.configure(highlightcolor="black")
        self.bt_run.configure(pady="0")
        self.bt_run.configure(text="""Sort files""")

        #graphic frame "output directory", DONE
        self.frame_outputDir = tk.LabelFrame(self.frame_setup)
        self.frame_outputDir.place(relx=0.026, rely=0.085, relheight=0.234
                , relwidth=0.947, bordermode='ignore')
        self.frame_outputDir.configure(relief='groove')
        self.frame_outputDir.configure(foreground="black")
        self.frame_outputDir.configure(text="""Output directory""")
        self.frame_outputDir.configure(background="#d9d9d9")
        self.frame_outputDir.configure(highlightbackground="#d9d9d9")
        self.frame_outputDir.configure(highlightcolor="black")
        self.frame_outputDir.configure(width=360)

        #button - change output dir, DONE
        self.bt_browseDir = tk.Button(self.frame_outputDir)
        self.bt_browseDir.place(relx=0.917, rely=0.364, height=24, width=17, bordermode='ignore')
        self.bt_browseDir.configure(activebackground="#ececec")
        self.bt_browseDir.configure(activeforeground="#000000")
        self.bt_browseDir.configure(background="#d9d9d9")
        self.bt_browseDir.configure(disabledforeground="#a3a3a3")
        self.bt_browseDir.configure(foreground="#000000")
        self.bt_browseDir.configure(highlightbackground="#d9d9d9")
        self.bt_browseDir.configure(highlightcolor="black")
        self.bt_browseDir.configure(pady="0")
        self.bt_browseDir.configure(text="""...""")
        self.bt_browseDir.configure(command = self.browse_button)

        #text box showing current output directory, DONE
        self.txt_outputDir = tk.Text(self.frame_outputDir)
        self.txt_outputDir.place(relx=0.028, rely=0.364, relheight=0.436
                , relwidth=0.872, bordermode='ignore')
        self.txt_outputDir.configure(background="white")
        self.txt_outputDir.configure(font="TkTextFont")
        self.txt_outputDir.configure(foreground="black")
        self.txt_outputDir.configure(highlightbackground="#d9d9d9")
        self.txt_outputDir.configure(highlightcolor="black")
        self.txt_outputDir.configure(insertbackground="black")
        self.txt_outputDir.configure(selectbackground="#c4c4c4")
        self.txt_outputDir.configure(selectforeground="black")
        self.txt_outputDir.configure(width=314)
        self.txt_outputDir.configure(wrap='none')
        # preset output dir to C:/ID3sort
        self.txt_outputDir.insert(tk.END, r' C:/ID3sort')
        # text box is not editable
        self.txt_outputDir.configure(state=tk.DISABLED)

        #graphic frame "output format", DONE
        self.frame_outputForm = tk.LabelFrame(self.frame_setup)
        self.frame_outputForm.place(relx=0.026, rely=0.34, relheight=0.362
                , relwidth=0.947, bordermode='ignore')
        self.frame_outputForm.configure(relief='groove')
        self.frame_outputForm.configure(foreground="black")
        self.frame_outputForm.configure(text="""Output format""")
        self.frame_outputForm.configure(background="#d9d9d9")
        self.frame_outputForm.configure(highlightbackground="#d9d9d9")
        self.frame_outputForm.configure(highlightcolor="black")
        self.frame_outputForm.configure(width=360)

        #text box showing current output format, TO DO
        self.txt_outputForm = tk.Text(self.frame_outputForm)
        self.txt_outputForm.place(relx=0.028, rely=0.235, relheight=0.282
                                  , relwidth=0.928, bordermode='ignore')
        self.txt_outputForm.configure(background="white")
        self.txt_outputForm.configure(font="TkTextFont")
        self.txt_outputForm.configure(foreground="black")
        self.txt_outputForm.configure(highlightbackground="#d9d9d9")
        self.txt_outputForm.configure(highlightcolor="black")
        self.txt_outputForm.configure(insertbackground="black")
        self.txt_outputForm.configure(selectbackground="#c4c4c4")
        self.txt_outputForm.configure(selectforeground="black")
        self.txt_outputForm.configure(width=334)
        self.txt_outputForm.configure(wrap='word')

        #button - change output format, make popup window, TO DO
        self.bt_changeForm = tk.Button(self.frame_outputForm)
        self.bt_changeForm.place(relx=0.75, rely=0.588, height=25, width=75
                , bordermode='ignore')
        self.bt_changeForm.configure(activebackground="#ececec")
        self.bt_changeForm.configure(activeforeground="#000000")
        self.bt_changeForm.configure(background="#d9d9d9")
        self.bt_changeForm.configure(disabledforeground="#a3a3a3")
        self.bt_changeForm.configure(foreground="#000000")
        self.bt_changeForm.configure(highlightbackground="#d9d9d9")
        self.bt_changeForm.configure(highlightcolor="black")
        self.bt_changeForm.configure(pady="0")
        self.bt_changeForm.configure(text="""Change""")

        #button - load files, TO DO
        self.bt_load = tk.Button(self.frame_setup)
        self.bt_load.place(relx=0.105, rely=0.809, height=30, width=95, bordermode = 'ignore')
        self.bt_load.configure(activebackground="#ececec")
        self.bt_load.configure(activeforeground="#000000")
        self.bt_load.configure(background="#d9d9d9")
        self.bt_load.configure(disabledforeground="#a3a3a3")
        self.bt_load.configure(foreground="#000000")
        self.bt_load.configure(highlightbackground="#d9d9d9")
        self.bt_load.configure(highlightcolor="black")
        self.bt_load.configure(pady="0")
        self.bt_load.configure(text='''Load files''')
        self.bt_load.configure(command=self.load_files)

        #listbox - show loaded files, TO DO
        self.listbox = ScrolledListBox(root)
        self.listbox.place(relx=0.013, rely=0.019, relheight=0.963
                             , relwidth=0.476)
        self.listbox.configure(background="white")
        self.listbox.configure(disabledforeground="#a3a3a3")
        self.listbox.configure(font="TkFixedFont")
        self.listbox.configure(foreground="black")
        self.listbox.configure(highlightbackground="#d9d9d9")
        self.listbox.configure(highlightcolor="#d9d9d9")
        self.listbox.configure(selectbackground="#c4c4c4")
        self.listbox.configure(selectforeground="black")
        self.listbox.configure(width=10)

        #graphic frame "view", DONE
        self.frame_view = tk.LabelFrame(root)
        self.frame_view.place(relx=0.5, rely=0.019, relheight=0.495
                , relwidth=0.487)
        self.frame_view.configure(relief='groove')
        self.frame_view.configure(foreground="black")
        self.frame_view.configure(text="""View""")
        self.frame_view.configure(background="#d9d9d9")
        self.frame_view.configure(highlightbackground="#d9d9d9")
        self.frame_view.configure(highlightcolor="black")
        self.frame_view.configure(width=380)

        #graphic frame "path view", DONE
        self.frame_pathView = tk.LabelFrame(self.frame_view)
        self.frame_pathView.place(relx=0.026, rely=0.075, relheight=0.208
                , relwidth=0.947, bordermode='ignore')
        self.frame_pathView.configure(relief='groove')
        self.frame_pathView.configure(foreground="black")
        self.frame_pathView.configure(text="""Path view""")
        self.frame_pathView.configure(background="#d9d9d9")
        self.frame_pathView.configure(highlightbackground="#d9d9d9")
        self.frame_pathView.configure(highlightcolor="black")
        self.frame_pathView.configure(width=360)


    #radio buttons to select view  TO DO ------------------------------------------
        self.view = tk.StringVar(value='path')

        #radiobutton - toggle system path view, TO DO
        self.sel_pathView = tk.Radiobutton(self.frame_pathView)
        self.sel_pathView.place(relx=0.028, rely=0.364, relheight=0.455
                , relwidth=0.442, bordermode='ignore')
        self.sel_pathView.configure(activebackground="#ececec")
        self.sel_pathView.configure(activeforeground="#000000")
        self.sel_pathView.configure(anchor='w')
        self.sel_pathView.configure(background="#d9d9d9")
        self.sel_pathView.configure(disabledforeground="#a3a3a3")
        self.sel_pathView.configure(foreground="#000000")
        self.sel_pathView.configure(highlightbackground="#d9d9d9")
        self.sel_pathView.configure(highlightcolor="black")
        self.sel_pathView.configure(justify='left')
        self.sel_pathView.configure(text="""Toggle system path view""")
        self.sel_pathView.configure(variable = self.view, value = 'path')

        #graphic frame "id3 view", DONE
        self.frame_id3view = tk.LabelFrame(self.frame_view)
        self.frame_id3view.place(relx=0.026, rely=0.302, relheight=0.66
                , relwidth=0.947, bordermode='ignore')
        self.frame_id3view.configure(relief='groove')
        self.frame_id3view.configure(foreground="black")
        self.frame_id3view.configure(text="""ID3 view""")
        self.frame_id3view.configure(background="#d9d9d9")
        self.frame_id3view.configure(highlightbackground="#d9d9d9")
        self.frame_id3view.configure(highlightcolor="black")
        self.frame_id3view.configure(width=360)

        #radiobutton - toggle id3 view, TO DO
        self.sel_id3view = tk.Radiobutton(self.frame_id3view)
        self.sel_id3view.place(relx=0.028, rely=0.114, relheight=0.143
                , relwidth=0.442, bordermode='ignore')
        self.sel_id3view.configure(activebackground="#ececec")
        self.sel_id3view.configure(activeforeground="#000000")
        self.sel_id3view.configure(anchor='w')
        self.sel_id3view.configure(background="#d9d9d9")
        self.sel_id3view.configure(disabledforeground="#a3a3a3")
        self.sel_id3view.configure(foreground="#000000")
        self.sel_id3view.configure(highlightbackground="#d9d9d9")
        self.sel_id3view.configure(highlightcolor="black")
        self.sel_id3view.configure(justify='left')
        self.sel_id3view.configure(text="""Toggle ID3 view""")
        self.sel_id3view.configure(variable = self.view, value = 'id3view')

    #end radio buttons to select view  ------------------------------------------

        #graphic frame "show", DONE
        self.l_show = tk.Label(self.frame_id3view)
        self.l_show.place(relx=0.028, rely=0.343, height=21, width=38
                , bordermode='ignore')
        self.l_show.configure(activebackground="#f9f9f9")
        self.l_show.configure(activeforeground="black")
        self.l_show.configure(background="#d9d9d9")
        self.l_show.configure(disabledforeground="#a3a3a3")
        self.l_show.configure(foreground="#000000")
        self.l_show.configure(highlightbackground="#d9d9d9")
        self.l_show.configure(highlightcolor="black")
        self.l_show.configure(text="""Show:""")
        
        #horizontal separator, DONE
        self.separator = ttk.Separator(self.frame_id3view)
        self.separator.place(relx=0.042, rely=0.286, relwidth=0.917
                , bordermode='ignore')

    #checkbutton to select what ID to show TO DO  --------------------------------------
        #check variables
        self.view_artist = tk.IntVar()
        self.view_album = tk.IntVar()
        self.view_title = tk.IntVar()
        self.view_titlenr = tk.IntVar()
        self.view_year = tk.IntVar()

        #checkbutton: show artist TO DO
        self.cbt_artist = tk.Checkbutton(self.frame_id3view)
        self.cbt_artist.place(relx=0.167, rely=0.343, relheight=0.143
                , relwidth=0.156, bordermode='ignore')
        self.cbt_artist.configure(activebackground="#ececec")
        self.cbt_artist.configure(activeforeground="#000000")
        self.cbt_artist.configure(anchor='w')
        self.cbt_artist.configure(background="#d9d9d9")
        self.cbt_artist.configure(disabledforeground="#a3a3a3")
        self.cbt_artist.configure(foreground="#000000")
        self.cbt_artist.configure(highlightbackground="#d9d9d9")
        self.cbt_artist.configure(highlightcolor="black")
        self.cbt_artist.configure(justify='left')
        self.cbt_artist.configure(text="""Artist""")
        self.cbt_artist.configure(variable = self.view_artist)
        self.cbt_artist.select()

        #checkbutton: show album TO DO
        self.cbt_album = tk.Checkbutton(self.frame_id3view)
        self.cbt_album.place(relx=0.167, rely=0.457, relheight=0.143
                , relwidth=0.169, bordermode='ignore')
        self.cbt_album.configure(activebackground="#ececec")
        self.cbt_album.configure(activeforeground="#000000")
        self.cbt_album.configure(anchor='w')
        self.cbt_album.configure(background="#d9d9d9")
        self.cbt_album.configure(disabledforeground="#a3a3a3")
        self.cbt_album.configure(foreground="#000000")
        self.cbt_album.configure(highlightbackground="#d9d9d9")
        self.cbt_album.configure(highlightcolor="black")
        self.cbt_album.configure(justify='left')
        self.cbt_album.configure(text="""Album""")
        self.cbt_album.configure(variable=self.view_album)
        self.cbt_album.select()

        #checkbutton: show year TO DO
        self.cbt_year = tk.Checkbutton(self.frame_id3view)
        self.cbt_year.place(relx=0.167, rely=0.8, relheight=0.143, relwidth=0.169
                , bordermode='ignore')
        self.cbt_year.configure(activebackground="#ececec")
        self.cbt_year.configure(activeforeground="#000000")
        self.cbt_year.configure(anchor='w')
        self.cbt_year.configure(background="#d9d9d9")
        self.cbt_year.configure(disabledforeground="#a3a3a3")
        self.cbt_year.configure(foreground="#000000")
        self.cbt_year.configure(highlightbackground="#d9d9d9")
        self.cbt_year.configure(highlightcolor="black")
        self.cbt_year.configure(justify='left')
        self.cbt_year.configure(text="""Year""")
        self.cbt_year.configure(variable=self.view_year)
        self.cbt_year.select()

        #checkbutton: show title TO DO
        self.cbt_title = tk.Checkbutton(self.frame_id3view)
        self.cbt_title.place(relx=0.167, rely=0.571, relheight=0.143
                , relwidth=0.169, bordermode='ignore')
        self.cbt_title.configure(activebackground="#ececec")
        self.cbt_title.configure(activeforeground="#000000")
        self.cbt_title.configure(anchor='w')
        self.cbt_title.configure(background="#d9d9d9")
        self.cbt_title.configure(disabledforeground="#a3a3a3")
        self.cbt_title.configure(foreground="#000000")
        self.cbt_title.configure(highlightbackground="#d9d9d9")
        self.cbt_title.configure(highlightcolor="black")
        self.cbt_title.configure(justify='left')
        self.cbt_title.configure(text="""Title""")
        self.cbt_title.configure(variable=self.view_title)
        self.cbt_title.select()

        #checkbutton: show title number TO DO
        self.cbt_num = tk.Checkbutton(self.frame_id3view)
        self.cbt_num.place(relx=0.167, rely=0.686, relheight=0.143
                , relwidth=0.197, bordermode='ignore')
        self.cbt_num.configure(activebackground="#ececec")
        self.cbt_num.configure(activeforeground="#000000")
        self.cbt_num.configure(anchor='w')
        self.cbt_num.configure(background="#d9d9d9")
        self.cbt_num.configure(disabledforeground="#a3a3a3")
        self.cbt_num.configure(foreground="#000000")
        self.cbt_num.configure(highlightbackground="#d9d9d9")
        self.cbt_num.configure(highlightcolor="black")
        self.cbt_num.configure(justify='left')
        self.cbt_num.configure(text="""Track Nr.""")
        self.cbt_num.configure(variable=self.view_titlenr)
        self.cbt_num.select()
    #END checkbutton to select what to show  --------------------------------------

        #graphic frame "list by", DONE
        self.l_listBy = tk.Label(self.frame_id3view)
        self.l_listBy.place(relx=0.556, rely=0.343, height=21, width=48
                , bordermode='ignore')
        self.l_listBy.configure(activebackground="#f9f9f9")
        self.l_listBy.configure(activeforeground="black")
        self.l_listBy.configure(background="#d9d9d9")
        self.l_listBy.configure(disabledforeground="#a3a3a3")
        self.l_listBy.configure(foreground="#000000")
        self.l_listBy.configure(highlightbackground="#d9d9d9")
        self.l_listBy.configure(highlightcolor="black")
        self.l_listBy.configure(text="""Sort by:""")


    #checkbutton to select sort option TO DO  --------------------------------------
        self.sort_control = tk.StringVar(value='artist')

        #radiobutton: sort by artist TO DO
        self.rbt_artist = tk.Radiobutton(self.frame_id3view)
        self.rbt_artist.place(relx=0.722, rely=0.343, relheight=0.143
                , relwidth=0.156, bordermode='ignore')
        self.rbt_artist.configure(activebackground="#ececec")
        self.rbt_artist.configure(activeforeground="#000000")
        self.rbt_artist.configure(anchor='w')
        self.rbt_artist.configure(background="#d9d9d9")
        self.rbt_artist.configure(disabledforeground="#a3a3a3")
        self.rbt_artist.configure(foreground="#000000")
        self.rbt_artist.configure(highlightbackground="#d9d9d9")
        self.rbt_artist.configure(highlightcolor="black")
        self.rbt_artist.configure(justify='left')
        self.rbt_artist.configure(text="""Artist""")
        self.rbt_artist.configure(variable = self.sort_control)
        self.rbt_artist.configure(value = 'artist')

        #radiobutton: sort by album TO DO
        self.rbt_album = tk.Radiobutton(self.frame_id3view)
        self.rbt_album.place(relx=0.722, rely=0.457, relheight=0.143
                , relwidth=0.161, bordermode='ignore')
        self.rbt_album.configure(activebackground="#ececec")
        self.rbt_album.configure(activeforeground="#000000")
        self.rbt_album.configure(anchor='w')
        self.rbt_album.configure(background="#d9d9d9")
        self.rbt_album.configure(disabledforeground="#a3a3a3")
        self.rbt_album.configure(foreground="#000000")
        self.rbt_album.configure(highlightbackground="#d9d9d9")
        self.rbt_album.configure(highlightcolor="black")
        self.rbt_album.configure(justify='left')
        self.rbt_album.configure(text="""Album""")
        self.rbt_album.configure(variable = self.sort_control)
        self.rbt_album.configure(value = 'album')

        #radiobutton: sort by title TO DO
        self.rbt_title = tk.Radiobutton(self.frame_id3view)
        self.rbt_title.place(relx=0.722, rely=0.571, relheight=0.143
                , relwidth=0.161, bordermode='ignore')
        self.rbt_title.configure(activebackground="#ececec")
        self.rbt_title.configure(activeforeground="#000000")
        self.rbt_title.configure(anchor='w')
        self.rbt_title.configure(background="#d9d9d9")
        self.rbt_title.configure(disabledforeground="#a3a3a3")
        self.rbt_title.configure(foreground="#000000")
        self.rbt_title.configure(highlightbackground="#d9d9d9")
        self.rbt_title.configure(highlightcolor="black")
        self.rbt_title.configure(justify='left')
        self.rbt_title.configure(text="""Title""")
        self.rbt_title.configure(variable = self.sort_control)
        self.rbt_title.configure(value = 'title')

        #radiobutton: sort by title number TO DO
        self.rbt_num = tk.Radiobutton(self.frame_id3view)
        self.rbt_num.place(relx=0.722, rely=0.686, relheight=0.143
                , relwidth=0.217, bordermode='ignore')
        self.rbt_num.configure(activebackground="#ececec")
        self.rbt_num.configure(activeforeground="#000000")
        self.rbt_num.configure(anchor='w')
        self.rbt_num.configure(background="#d9d9d9")
        self.rbt_num.configure(disabledforeground="#a3a3a3")
        self.rbt_num.configure(foreground="#000000")
        self.rbt_num.configure(highlightbackground="#d9d9d9")
        self.rbt_num.configure(highlightcolor="black")
        self.rbt_num.configure(justify='left')
        self.rbt_num.configure(text="""Track Nr.""")
        self.rbt_num.configure(variable = self.sort_control)
        self.rbt_num.configure(value = 'titlenr')

        #radiobutton: sort by title year TO DO
        self.rbt_year = tk.Radiobutton(self.frame_id3view)
        self.rbt_year.place(relx=0.722, rely=0.8, relheight=0.143, relwidth=0.161
                , bordermode='ignore')
        self.rbt_year.configure(activebackground="#ececec")
        self.rbt_year.configure(activeforeground="#000000")
        self.rbt_year.configure(anchor='w')
        self.rbt_year.configure(background="#d9d9d9")
        self.rbt_year.configure(disabledforeground="#a3a3a3")
        self.rbt_year.configure(foreground="#000000")
        self.rbt_year.configure(highlightbackground="#d9d9d9")
        self.rbt_year.configure(highlightcolor="black")
        self.rbt_year.configure(justify='left')
        self.rbt_year.configure(text="""Year""")
        self.rbt_year.configure(variable = self.sort_control)
        self.rbt_year.configure(value = 'year')

        #turn of id3view since path view is preset
        self.cbt_artist.configure(state='disabled')
        self.cbt_album.configure(state='disabled')
        self.cbt_title.configure(state='disabled')
        self.cbt_num.configure(state='disabled')
        self.cbt_year.configure(state='disabled')
        self.rbt_artist.configure(state='disabled')
        self.rbt_album.configure(state='disabled')
        self.rbt_title.configure(state='disabled')
        self.rbt_num.configure(state='disabled')
        self.rbt_year.configure(state='disabled')


        #update after every action
        self.sel_id3view.configure(command=lambda: self.updater())
        self.sel_pathView.configure(command=lambda: self.updater())

        self.cbt_artist.configure(command=lambda: self.updater())
        self.cbt_album.configure(command=lambda: self.updater())
        self.cbt_title.configure(command=lambda: self.updater())
        self.cbt_num.configure(command=lambda: self.updater())
        self.cbt_year.configure(command=lambda: self.updater())

        self.rbt_artist.configure(command=lambda: self.updater())
        self.rbt_album.configure(command=lambda: self.updater())
        self.rbt_title.configure(command=lambda: self.updater())
        self.rbt_num.configure(command=lambda: self.updater())
        self.rbt_year.configure(command=lambda: self.updater())

        self.bt_changeForm.configure(command=self.popup_format)

# The following code is added to facilitate the Scrolled widgets.
class AutoScroll(object):
    """Configure the scrollbars for a widget."""

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)

        methods = tk.Pack.__dict__.keys() | tk.Grid.__dict__.keys() \
              | tk.Place.__dict__.keys()


        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        """Hide and show scrollbar as needed."""
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    """Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget."""
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, tk.Listbox):
    """A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed."""
    @_create_container
    def __init__(self, master, **kw):
        tk.Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))

def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')

def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1*int(event.delta/120),'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1*int(event.delta),'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')

def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1*int(event.delta/120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1*int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    start_gui()

